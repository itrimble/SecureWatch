{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// This function runs before every request\nexport async function middleware(request: NextRequest) {\n  // Skip auth for public routes and static files\n  const publicPaths = [\n    '/api/health',\n    '/api/status',\n    '/_next',\n    '/static',\n    '/favicon.ico',\n    '/',\n    '/login',\n    '/auth'\n  ];\n  \n  const path = request.nextUrl.pathname;\n  \n  // Allow public paths\n  if (publicPaths.some(p => path.startsWith(p))) {\n    return NextResponse.next();\n  }\n\n  // For API routes, check authentication\n  if (path.startsWith('/api')) {\n    const authHeader = request.headers.get('authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    \n    // JWT verification happens in individual API routes\n    // This is just a basic check for presence of auth header\n  }\n\n  return NextResponse.next();\n}\n\n// Configure which routes use this middleware\nexport const config = {\n  matcher: [\n    // Match all paths except static files\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ]\n};"],"names":[],"mappings":";;;;AAAA;AAAA;;AAIO,eAAe,WAAW,OAAoB;IACnD,+CAA+C;IAC/C,MAAM,cAAc;QAClB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,qBAAqB;IACrB,IAAI,YAAY,IAAI,CAAC,CAAA,IAAK,KAAK,UAAU,CAAC,KAAK;QAC7C,OAAO,2YAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,uCAAuC;IACvC,IAAI,KAAK,UAAU,CAAC,SAAS;QAC3B,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,2YAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;IAEA,oDAAoD;IACpD,yDAAyD;IAC3D;IAEA,OAAO,2YAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP,sCAAsC;QACtC;KACD;AACH"}}]
}