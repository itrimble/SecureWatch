// apps/log-ingestion/src/parsers/builtin/ZeekLogParser.ts
import { LogParser, ParsedEvent, NormalizedEvent, ParserConfig } from '../types';

/**
 * Zeek Network Security Monitor Parser
 *
 * Parses tab-separated log files generated by Zeek (formerly Bro). This parser
 * is designed to be a meta-parser that can handle various Zeek log types like
 * conn.log, http.log, dns.log, etc., by reading the #fields header.
 */
export class ZeekLogParser implements LogParser {
  id = 'zeek-log-parser';
  name = 'Zeek (Bro) Log Parser';
  vendor = 'Zeek Project';
  logSource = 'zeek';
  version = '1.0.0';
  format = 'custom' as const;
  category = 'network' as const;
  priority = 90;
  enabled = true;

  config: ParserConfig = {
    enabled: true,
    priority: 90,
    timeout: 5000,
    maxSize: 50000,
  };

  private fields: string[] = [];
  private logType = 'unknown';

  validate(rawLog: string): boolean {
    return rawLog.startsWith('#') || /^\d+\.\d+/.test(rawLog);
  }

  parse(rawLog: string): ParsedEvent | null {
    if (rawLog.startsWith('#path: ')) {
        this.logType = rawLog.split(' ')[1];
        return null; // Header line
    }
    if (rawLog.startsWith('#fields')) {
      this.fields = rawLog.split('\t').slice(1);
      return null; // Header line
    }
    if (rawLog.startsWith('#')) return null; // Skip other comments

    const values = rawLog.split('\t');
    const data: Record<string, string> = {};
    this.fields.forEach((field, index) => {
      data[field] = values[index] || '-';
    });
    
    return {
      timestamp: new Date(parseFloat(data.ts) * 1000),
      source: 'zeek-sensor',
      category: 'network',
      action: this.logType,
      outcome: 'success',
      severity: 'low',
      rawData: rawLog,
      custom: {
        zeek: data
      }
    };
  }

  normalize(event: ParsedEvent): NormalizedEvent {
    const data = event.custom.zeek;
    const conn = data['id.orig_h'] ? data : {}; // For conn.log
    
    const normalized: NormalizedEvent = {
      '@timestamp': event.timestamp.toISOString(),
      'message': `Zeek ${event.action} from ${conn['id.orig_h'] || 'unknown'}`,
      'event.kind': 'event',
      'event.category': ['network'],
      'event.type': ['protocol'],
      'event.action': event.action,
      'event.outcome': event.outcome,
      'event.duration': data.duration ? parseFloat(data.duration) * 1e9 : undefined,
      'event.severity': 25,
      'log.level': 'low',
      'log.original': event.rawData,
      'source.ip': conn['id.orig_h'],
      'source.port': conn['id.orig_p'] ? parseInt(conn['id.orig_p'], 10) : undefined,
      'destination.ip': conn['id.resp_h'],
      'destination.port': conn['id.resp_p'] ? parseInt(conn['id.resp_p'], 10) : undefined,
      'network.transport': data.proto,
      'network.bytes': data.orig_bytes ? parseInt(data.orig_bytes, 10) + parseInt(data.resp_bytes, 10) : undefined,
      'observer.vendor': this.vendor,
      'observer.product': 'Zeek',
      'observer.type': 'network-sensor',
      'securewatch.parser.id': this.id,
      'securewatch.parser.name': this.name,
      'securewatch.parser.version': this.version,
    };
    
    return normalized;
  }
}
