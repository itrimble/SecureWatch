// apps/log-ingestion/src/parsers/builtin/PostgreSQLAuditParser.ts
import { LogParser, ParsedEvent, NormalizedEvent, ParserConfig } from '../types';

/**
 * PostgreSQL Audit Log Parser
 *
 * Parses audit logs generated by PostgreSQL, typically using the `pgaudit` extension.
 * The format is usually CSV-like, containing detailed information about database
 * sessions, queries, and DDL/DML actions.
 */
export class PostgreSQLAuditParser implements LogParser {
  id = 'postgresql-audit';
  name = 'PostgreSQL Audit';
  vendor = 'PostgreSQL Global Development Group';
  logSource = 'postgresql:audit';
  version = '1.0.0';
  format = 'csv' as const;
  category = 'database' as const;
  priority = 80;
  enabled = true;

  config: ParserConfig = {
    enabled: true,
    priority: 80,
    timeout: 5000,
    maxSize: 50000,
  };

  private readonly pgauditRegex = /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} [A-Z]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),\"?([^\"]*)\"?,\"([^\"]*)\"$/;

  validate(rawLog: string): boolean {
    return rawLog.includes('AUDIT:');
  }

  parse(rawLog: string): ParsedEvent | null {
    const match = rawLog.match(this.pgauditRegex);
    if (!match) return null;

    const [, timestamp, user, db, pid, app, type, , , , , , command, statement] = match;

    return {
      timestamp: new Date(timestamp + 'Z'),
      source: 'postgresql',
      category: 'database',
      action: type,
      outcome: 'success', // Audit events are informational
      severity: 'low',
      rawData: rawLog,
      custom: {
        postgres: {
          user, db, pid, app, type, command, statement
        }
      }
    };
  }

  normalize(event: ParsedEvent): NormalizedEvent {
    const data = event.custom.postgres;
    return {
      '@timestamp': event.timestamp.toISOString(),
      'message': `PostgreSQL audit: User '${data.user}' executed '${data.command}' in database '${data.db}'`,
      'event.kind': 'event',
      'event.category': ['database'],
      'event.type': ['info', 'access'],
      'event.action': event.action,
      'event.outcome': event.outcome,
      'event.severity': 25,
      'log.level': 'low',
      'log.original': event.rawData,
      'db.system': 'postgresql',
      'db.name': data.db,
      'db.user.name': data.user,
      'db.statement': data.statement,
      'process.pid': parseInt(data.pid, 10),
      'process.name': data.app,
      'observer.vendor': this.vendor,
      'observer.product': 'PostgreSQL',
      'observer.type': 'database',
      'securewatch.parser.id': this.id,
      'securewatch.parser.name': this.name,
      'securewatch.parser.version': this.version,
      'securewatch.confidence': 0.86,
      'securewatch.severity': event.severity,
    };
  }
}
