[DEFAULT]
# URL of the Next.js ingestion API endpoint
INGEST_API_URL = http://localhost:3000/api/ingest

# Default log source identifier if not specified per source
LOG_SOURCE_IDENTIFIER = macos_generic_log

# Number of events to accumulate before attempting to send a batch
BATCH_SIZE = 15

# Maximum time in seconds to wait before sending an incomplete batch
FLUSH_INTERVAL_SECONDS = 10

# Logging level for the agent itself. Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
AGENT_LOG_LEVEL = INFO

# Maximum number of retries for sending a batch if the API is unavailable or returns a server error
MAX_SEND_RETRIES = 3

# Initial delay in seconds for retrying a failed batch send (will be doubled on subsequent retries)
INITIAL_RETRY_DELAY_SECONDS = 5


[UnifiedLog:Authentication]
# Authentication and authorization events - critical for SOC monitoring
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_auth_events
# Stream authentication events including login, logout, sudo, authorization failures
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.loginwindow" OR subsystem == "com.apple.authd" OR subsystem == "com.apple.sudo" OR category == "authentication"' --style json
COLLECTION_INTERVAL_SECONDS = 5


[UnifiedLog:Security]
# Security framework events - malware detection, code signing, etc.
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_security_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.security" OR subsystem == "com.apple.securityd" OR subsystem == "com.apple.xpc.security"' --style json
COLLECTION_INTERVAL_SECONDS = 10


[UnifiedLog:ProcessExecution]
# Process creation and execution - essential for threat hunting
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_process_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.kernel" AND category == "process" OR eventMessage CONTAINS "exec"' --style json
COLLECTION_INTERVAL_SECONDS = 5


[UnifiedLog:NetworkActivity]
# Network connections and activity
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_network_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.networkd" OR subsystem == "com.apple.network" OR category == "network"' --style json
COLLECTION_INTERVAL_SECONDS = 15


[UnifiedLog:Firewall]
# Application Layer Firewall events
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_firewall_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.alf" OR process == "socketfilterfw"' --style json
COLLECTION_INTERVAL_SECONDS = 20


[FileLog:SystemAudit]
# System audit trail - detailed system call auditing
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_audit_trail
FILE_PATH = /var/audit/current
COLLECTION_INTERVAL_SECONDS = 30
# Note: Requires sudo privileges to read audit files


[FileLog:SystemLog]
# Traditional system log (still contains some valuable events)
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_system_log
FILE_PATH = /var/log/system.log
COLLECTION_INTERVAL_SECONDS = 20


[FileLog:SecurityLog]
# Security-specific log file
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_security_log
FILE_PATH = /var/log/security.log
COLLECTION_INTERVAL_SECONDS = 15


[UnifiedLog:KernelEvents]
# Kernel-level events including driver loads, system calls
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_kernel_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.kernel" AND (category == "default" OR category == "security")' --style json
COLLECTION_INTERVAL_SECONDS = 30


[UnifiedLog:ApplicationCrashes]
# Application crashes and exceptions - may indicate exploitation attempts
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_crash_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.ReportCrash" OR eventMessage CONTAINS "crash" OR eventMessage CONTAINS "exception"' --style json
COLLECTION_INTERVAL_SECONDS = 60


[FileLog:CrashReports]
# Crash report files for deeper analysis
ENABLED = false
LOG_SOURCE_IDENTIFIER = macos_crash_reports
FILE_PATH = /Library/Logs/DiagnosticReports
COLLECTION_INTERVAL_SECONDS = 300
# Note: This is a directory - agent would need to monitor for new .crash files


[UnifiedLog:XPCServices]
# XPC service communication - useful for detecting privilege escalation
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_xpc_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.xpc" AND category == "security"' --style json
COLLECTION_INTERVAL_SECONDS = 30


[UnifiedLog:FileSystemAccess]
# File system access patterns - useful for detecting data exfiltration
ENABLED = false  # Can be very verbose - enable only when needed
LOG_SOURCE_IDENTIFIER = macos_fs_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.kernel" AND category == "fs"' --style json
COLLECTION_INTERVAL_SECONDS = 10


[FileLog:InstallLog]
# Software installation events
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_install_events
FILE_PATH = /var/log/install.log
COLLECTION_INTERVAL_SECONDS = 60


[UnifiedLog:Bluetooth]
# Bluetooth activity - potential attack vector monitoring
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_bluetooth_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.bluetooth"' --style json
COLLECTION_INTERVAL_SECONDS = 45


[UnifiedLog:USB]
# USB device connections - important for detecting malicious hardware
ENABLED = true
LOG_SOURCE_IDENTIFIER = macos_usb_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.iokit.usb" OR eventMessage CONTAINS "USB"' --style json
COLLECTION_INTERVAL_SECONDS = 30


# Additional high-value application logs
[FileLog:SafariBrowsing]
ENABLED = false  # Privacy sensitive - enable only if needed
LOG_SOURCE_IDENTIFIER = safari_browsing_log
FILE_PATH = ~/Library/Safari/History.db
COLLECTION_INTERVAL_SECONDS = 300


[UnifiedLog:Spotlight]
# Spotlight indexing activity - can reveal file access patterns
ENABLED = false  # Can be verbose
LOG_SOURCE_IDENTIFIER = macos_spotlight_events
LOG_COMMAND = log stream --predicate 'subsystem == "com.apple.spotlight"' --style json
COLLECTION_INTERVAL_SECONDS = 60


# Note: Some logs require elevated privileges (sudo) to access
# Consider running the agent with appropriate permissions or using launchd
# with elevated privileges for production deployment