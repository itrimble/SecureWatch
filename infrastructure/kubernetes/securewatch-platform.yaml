# SecureWatch Platform Kubernetes Deployment
# Complete container orchestration for all platform components

apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-api-gateway
  namespace: securewatch
  labels:
    app: securewatch-api-gateway
    component: gateway
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: securewatch-api-gateway
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: securewatch-api-gateway
        component: gateway
        tier: frontend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "3"
        securewatch.io/max-replicas: "20"
        securewatch.io/target-cpu: "70"
        securewatch.io/target-memory: "80"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: api-gateway
        image: securewatch/api-gateway:v1.0.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        - containerPort: 9090
          name: metrics
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: AUTH_SERVICE_URL
          value: "http://securewatch-auth-service:3000"
        - name: LOG_INGESTION_URL
          value: "http://securewatch-log-ingestion:4000"
        - name: SEARCH_API_URL
          value: "http://securewatch-search-api:5000"
        - name: ANALYTICS_ENGINE_URL
          value: "http://securewatch-analytics-engine:6000"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: securewatch-secrets
              key: jwt_secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: securewatch-secrets
              key: api_key
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: securewatch-config
      - name: tls-certs
        secret:
          secretName: securewatch-tls

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-auth-service
  namespace: securewatch
  labels:
    app: securewatch-auth-service
    component: auth
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: securewatch-auth-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: securewatch-auth-service
        component: auth
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "15"
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: auth-service
        image: securewatch/auth-service:v1.0.0
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: db_host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: db_port
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: db_name
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: securewatch-secrets
              key: db_password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: securewatch-secrets
              key: jwt_secret
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: redis_host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: redis_port

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-log-ingestion
  namespace: securewatch
  labels:
    app: securewatch-log-ingestion
    component: ingestion
    tier: backend
spec:
  replicas: 5
  selector:
    matchLabels:
      app: securewatch-log-ingestion
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: securewatch-log-ingestion
        component: ingestion
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "3"
        securewatch.io/max-replicas: "50"
        securewatch.io/target-cpu: "60"
        securewatch.io/target-memory: "70"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: log-ingestion
        image: securewatch/log-ingestion:v1.0.0
        ports:
        - containerPort: 4000
          name: http
        - containerPort: 514
          name: syslog-udp
          protocol: UDP
        - containerPort: 1514
          name: syslog-tcp
          protocol: TCP
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 4Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "4000"
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: kafka_brokers
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-cluster.securewatch.svc.cluster.local:9200"
        - name: BUFFER_SIZE
          value: "10000"
        - name: BATCH_SIZE
          value: "1000"
        - name: FLUSH_INTERVAL
          value: "5000"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-search-api
  namespace: securewatch
  labels:
    app: securewatch-search-api
    component: search
    tier: backend
spec:
  replicas: 4
  selector:
    matchLabels:
      app: securewatch-search-api
  template:
    metadata:
      labels:
        app: securewatch-search-api
        component: search
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "25"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: search-api
        image: securewatch/search-api:v1.0.0
        ports:
        - containerPort: 5000
          name: http
        resources:
          requests:
            cpu: 300m
            memory: 512Mi
          limits:
            cpu: 1500m
            memory: 2Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "5000"
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-cluster.securewatch.svc.cluster.local:9200"
        - name: CACHE_ENABLED
          value: "true"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: redis_host

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-analytics-engine
  namespace: securewatch
  labels:
    app: securewatch-analytics-engine
    component: analytics
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: securewatch-analytics-engine
  template:
    metadata:
      labels:
        app: securewatch-analytics-engine
        component: analytics
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "20"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: analytics-engine
        image: securewatch/analytics-engine:v1.0.0
        ports:
        - containerPort: 6000
          name: http
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 6000
          initialDelaySeconds: 20
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 6000
          initialDelaySeconds: 45
          periodSeconds: 15
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "6000"
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: kafka_brokers
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-cluster.securewatch.svc.cluster.local:9200"
        - name: ML_MODEL_PATH
          value: "/app/models"
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: analytics-models-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-web-frontend
  namespace: securewatch
  labels:
    app: securewatch-web-frontend
    component: frontend
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: securewatch-web-frontend
  template:
    metadata:
      labels:
        app: securewatch-web-frontend
        component: frontend
        tier: frontend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "15"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: web-frontend
        image: securewatch/web-frontend:v1.0.0
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: API_GATEWAY_URL
          value: "http://securewatch-api-gateway:8080"
        - name: NEXT_PUBLIC_API_URL
          value: "/api"

---
# Services for all components
apiVersion: v1
kind: Service
metadata:
  name: securewatch-api-gateway
  namespace: securewatch
  labels:
    app: securewatch-api-gateway
spec:
  selector:
    app: securewatch-api-gateway
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: https
    port: 8443
    targetPort: 8443
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-auth-service
  namespace: securewatch
  labels:
    app: securewatch-auth-service
spec:
  selector:
    app: securewatch-auth-service
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-log-ingestion
  namespace: securewatch
  labels:
    app: securewatch-log-ingestion
spec:
  selector:
    app: securewatch-log-ingestion
  ports:
  - name: http
    port: 4000
    targetPort: 4000
  - name: syslog-udp
    port: 514
    targetPort: 514
    protocol: UDP
  - name: syslog-tcp
    port: 1514
    targetPort: 1514
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-search-api
  namespace: securewatch
  labels:
    app: securewatch-search-api
spec:
  selector:
    app: securewatch-search-api
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-analytics-engine
  namespace: securewatch
  labels:
    app: securewatch-analytics-engine
spec:
  selector:
    app: securewatch-analytics-engine
  ports:
  - port: 6000
    targetPort: 6000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-web-frontend
  namespace: securewatch
  labels:
    app: securewatch-web-frontend
spec:
  selector:
    app: securewatch-web-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Horizontal Pod Autoscalers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: securewatch-api-gateway-hpa
  namespace: securewatch
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: securewatch-api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: securewatch-log-ingestion-hpa
  namespace: securewatch
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: securewatch-log-ingestion
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 200
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 20
        periodSeconds: 120

---
# Missing Services: correlation-engine, query-processor, mcp-marketplace, hec-service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-correlation-engine
  namespace: securewatch
  labels:
    app: securewatch-correlation-engine
    component: correlation
    tier: backend
spec:
  replicas: 4
  selector:
    matchLabels:
      app: securewatch-correlation-engine
  template:
    metadata:
      labels:
        app: securewatch-correlation-engine
        component: correlation
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "30"
        prometheus.io/scrape: "true"
        prometheus.io/port: "7000"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: correlation-engine
        image: securewatch/correlation-engine:v1.0.0
        ports:
        - containerPort: 7000
          name: http
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 7000
          initialDelaySeconds: 20
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 7000
          initialDelaySeconds: 45
          periodSeconds: 15
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "7000"
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: kafka_brokers
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: redis_host
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: db_host
        - name: CORRELATION_RULES_PATH
          value: "/app/rules"
        volumeMounts:
        - name: correlation-rules
          mountPath: /app/rules
      volumes:
      - name: correlation-rules
        configMap:
          name: correlation-rules-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-query-processor
  namespace: securewatch
  labels:
    app: securewatch-query-processor
    component: query
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: securewatch-query-processor
  template:
    metadata:
      labels:
        app: securewatch-query-processor
        component: query
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "20"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: query-processor
        image: securewatch/query-processor:v1.0.0
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: websocket
        resources:
          requests:
            cpu: 800m
            memory: 1Gi
          limits:
            cpu: 3000m
            memory: 4Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8000"
        - name: WS_PORT
          value: "8001"
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-cluster.securewatch.svc.cluster.local:9200"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: redis_host
        - name: QUERY_TIMEOUT
          value: "30000"
        - name: MAX_CONCURRENT_QUERIES
          value: "100"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-mcp-marketplace
  namespace: securewatch
  labels:
    app: securewatch-mcp-marketplace
    component: marketplace
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: securewatch-mcp-marketplace
  template:
    metadata:
      labels:
        app: securewatch-mcp-marketplace
        component: marketplace
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "1"
        securewatch.io/max-replicas: "10"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: mcp-marketplace
        image: securewatch/mcp-marketplace:v1.0.0
        ports:
        - containerPort: 9000
          name: http
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "9000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: db_host
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: securewatch-secrets
              key: db_password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: redis_host

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securewatch-hec-service
  namespace: securewatch
  labels:
    app: securewatch-hec-service
    component: hec
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: securewatch-hec-service
  template:
    metadata:
      labels:
        app: securewatch-hec-service
        component: hec
        tier: backend
      annotations:
        securewatch.io/horizontal-scaling: "enabled"
        securewatch.io/min-replicas: "2"
        securewatch.io/max-replicas: "25"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8088"
    spec:
      serviceAccountName: securewatch-service-account
      containers:
      - name: hec-service
        image: securewatch/hec-service:v1.0.0
        ports:
        - containerPort: 8088
          name: hec
        - containerPort: 8089
          name: hec-ssl
        resources:
          requests:
            cpu: 400m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        readinessProbe:
          httpGet:
            path: /services/collector/health
            port: 8088
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /services/collector/health
            port: 8088
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: NODE_ENV
          value: "production"
        - name: HEC_PORT
          value: "8088"
        - name: HEC_SSL_PORT
          value: "8089"
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: securewatch-config
              key: kafka_brokers
        - name: TOKEN_VALIDATION
          value: "true"
        - name: MAX_CONTENT_LENGTH
          value: "100MB"
        - name: BATCH_SIZE
          value: "1000"
        volumeMounts:
        - name: hec-certs
          mountPath: /app/certs
          readOnly: true
      volumes:
      - name: hec-certs
        secret:
          secretName: hec-tls-certs

---
# Services for missing components
apiVersion: v1
kind: Service
metadata:
  name: securewatch-correlation-engine
  namespace: securewatch
  labels:
    app: securewatch-correlation-engine
spec:
  selector:
    app: securewatch-correlation-engine
  ports:
  - port: 7000
    targetPort: 7000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-query-processor
  namespace: securewatch
  labels:
    app: securewatch-query-processor
spec:
  selector:
    app: securewatch-query-processor
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  - name: websocket
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-mcp-marketplace
  namespace: securewatch
  labels:
    app: securewatch-mcp-marketplace
spec:
  selector:
    app: securewatch-mcp-marketplace
  ports:
  - port: 9000
    targetPort: 9000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: securewatch-hec-service
  namespace: securewatch
  labels:
    app: securewatch-hec-service
spec:
  selector:
    app: securewatch-hec-service
  ports:
  - name: hec
    port: 8088
    targetPort: 8088
  - name: hec-ssl
    port: 8089
    targetPort: 8089
  type: LoadBalancer

---
# Additional HPAs for new services
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: securewatch-correlation-engine-hpa
  namespace: securewatch
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: securewatch-correlation-engine
  minReplicas: 2
  maxReplicas: 30
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: securewatch-query-processor-hpa
  namespace: securewatch
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: securewatch-query-processor
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Network Policies for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: securewatch-network-policy
  namespace: securewatch
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: securewatch
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: securewatch
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 9200

---
# Pod Disruption Budgets
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: securewatch-api-gateway-pdb
  namespace: securewatch
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: securewatch-api-gateway

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: securewatch-log-ingestion-pdb
  namespace: securewatch
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: securewatch-log-ingestion

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: securewatch-correlation-engine-pdb
  namespace: securewatch
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: securewatch-correlation-engine

---
# Resource Quotas
apiVersion: v1
kind: ResourceQuota
metadata:
  name: securewatch-resource-quota
  namespace: securewatch
spec:
  hard:
    requests.cpu: "50"
    requests.memory: 100Gi
    limits.cpu: "200"
    limits.memory: 400Gi
    persistentvolumeclaims: "10"
    services: "20"
    pods: "100"

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: analytics-models-pvc
  namespace: securewatch
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: correlation-rules-pvc
  namespace: securewatch
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd