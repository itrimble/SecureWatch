# Advanced Observability Enhancements for SecureWatch Platform
# Implements latest best practices for SIEM monitoring, distributed tracing, and intelligent alerting

apiVersion: v1
kind: Namespace
metadata:
  name: observability
  labels:
    name: observability
    istio-injection: enabled
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# OpenTelemetry Collector for unified telemetry collection
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: observability
  labels:
    app: otel-collector
    component: telemetry
spec:
  replicas: 3
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
        component: telemetry
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: otel-collector-sa
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.88.0
        ports:
        - containerPort: 4317  # OTLP gRPC
          name: otlp-grpc
        - containerPort: 4318  # OTLP HTTP
          name: otlp-http
        - containerPort: 8888  # Metrics
          name: metrics
        - containerPort: 8889  # Prometheus metrics
          name: prometheus
        - containerPort: 13133 # Health check
          name: health
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: otel-config
          mountPath: /etc/otelcol-contrib
        env:
        - name: GOMEMLIMIT
          value: "3GiB"
        - name: GOCACHE
          value: "/tmp/go-cache"
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: otel-config
        configMap:
          name: otel-collector-config

---
# Loki for log aggregation and correlation
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: observability
  labels:
    app: loki
    component: logging
spec:
  serviceName: loki
  replicas: 3
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
        component: logging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3100"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: loki-sa
      containers:
      - name: loki
        image: grafana/loki:2.9.0
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9095
          name: grpc
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        args:
        - -config.file=/etc/loki/config.yaml
        - -target=all
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        - name: loki-storage
          mountPath: /loki
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 60
          periodSeconds: 30
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
  volumeClaimTemplates:
  - metadata:
      name: loki-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# Tempo for distributed tracing backend
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tempo
  namespace: observability
  labels:
    app: tempo
    component: tracing
spec:
  serviceName: tempo
  replicas: 2
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
        component: tracing
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3200"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tempo-sa
      containers:
      - name: tempo
        image: grafana/tempo:2.2.0
        ports:
        - containerPort: 3200
          name: http
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 14268
          name: jaeger-grpc
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        args:
        - -config.file=/etc/tempo/tempo.yaml
        - -target=all
        volumeMounts:
        - name: tempo-config
          mountPath: /etc/tempo
        - name: tempo-storage
          mountPath: /var/tempo
        readinessProbe:
          httpGet:
            path: /ready
            port: 3200
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /ready
            port: 3200
          initialDelaySeconds: 60
          periodSeconds: 30
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tempo-config
        configMap:
          name: tempo-config
  volumeClaimTemplates:
  - metadata:
      name: tempo-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
# Promtail for log shipping to Loki
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: observability
  labels:
    app: promtail
    component: log-shipper
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
        component: log-shipper
    spec:
      serviceAccountName: promtail-sa
      containers:
      - name: promtail
        image: grafana/promtail:2.9.0
        ports:
        - containerPort: 3101
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        args:
        - -config.file=/etc/promtail/config.yml
        - -client.url=http://loki.observability.svc.cluster.local:3100/loki/api/v1/push
        volumeMounts:
        - name: promtail-config
          mountPath: /etc/promtail
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: run
          mountPath: /run/promtail
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - DAC_READ_SEARCH
      volumes:
      - name: promtail-config
        configMap:
          name: promtail-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: run
        emptyDir: {}
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists

---
# Mimir for long-term metrics storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mimir
  namespace: observability
  labels:
    app: mimir
    component: metrics-storage
spec:
  serviceName: mimir
  replicas: 3
  selector:
    matchLabels:
      app: mimir
  template:
    metadata:
      labels:
        app: mimir
        component: metrics-storage
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mimir-sa
      containers:
      - name: mimir
        image: grafana/mimir:2.10.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9095
          name: grpc
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 8000m
            memory: 16Gi
        args:
        - -config.file=/etc/mimir/mimir.yaml
        - -target=all
        volumeMounts:
        - name: mimir-config
          mountPath: /etc/mimir
        - name: mimir-storage
          mountPath: /data
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 30
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: mimir-config
        configMap:
          name: mimir-config
  volumeClaimTemplates:
  - metadata:
      name: mimir-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: high-iops-ssd
      resources:
        requests:
          storage: 200Gi

---
# Vector for advanced log processing and routing
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  namespace: observability
  labels:
    app: vector
    component: log-processor
spec:
  selector:
    matchLabels:
      app: vector
  template:
    metadata:
      labels:
        app: vector
        component: log-processor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9598"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: vector-sa
      containers:
      - name: vector
        image: timberio/vector:0.33.0-distroless-libc
        ports:
        - containerPort: 9598
          name: metrics
        - containerPort: 8686
          name: api
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        args:
        - --config-dir
        - /etc/vector/
        volumeMounts:
        - name: vector-config
          mountPath: /etc/vector
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: procfs
          mountPath: /host/proc
          readOnly: true
        - name: sysfs
          mountPath: /host/sys
          readOnly: true
        - name: vector-data
          mountPath: /vector-data-dir
        env:
        - name: VECTOR_CONFIG_DIR
          value: "/etc/vector/"
        - name: VECTOR_REQUIRE_HEALTHY
          value: "true"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - DAC_READ_SEARCH
      volumes:
      - name: vector-config
        configMap:
          name: vector-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: procfs
        hostPath:
          path: /proc
      - name: sysfs
        hostPath:
          path: /sys
      - name: vector-data
        emptyDir: {}
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists

---
# Services for observability stack
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: observability
  labels:
    app: otel-collector
spec:
  selector:
    app: otel-collector
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
  - name: otlp-http
    port: 4318
    targetPort: 4318
  - name: metrics
    port: 8888
    targetPort: 8888
  - name: prometheus
    port: 8889
    targetPort: 8889
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: observability
  labels:
    app: loki
spec:
  selector:
    app: loki
  ports:
  - name: http
    port: 3100
    targetPort: 3100
  - name: grpc
    port: 9095
    targetPort: 9095
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: tempo
  namespace: observability
  labels:
    app: tempo
spec:
  selector:
    app: tempo
  ports:
  - name: http
    port: 3200
    targetPort: 3200
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
  - name: otlp-http
    port: 4318
    targetPort: 4318
  - name: jaeger-grpc
    port: 14268
    targetPort: 14268
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: mimir
  namespace: observability
  labels:
    app: mimir
spec:
  selector:
    app: mimir
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: grpc
    port: 9095
    targetPort: 9095
  type: ClusterIP

---
# Service Accounts and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector-sa
  namespace: observability
  labels:
    app: otel-collector

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-sa
  namespace: observability
  labels:
    app: loki

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tempo-sa
  namespace: observability
  labels:
    app: tempo

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail-sa
  namespace: observability
  labels:
    app: promtail

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mimir-sa
  namespace: observability
  labels:
    app: mimir

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector-sa
  namespace: observability
  labels:
    app: vector

---
# RBAC for log collection
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: observability-logs-reader
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: observability-logs-reader-binding
subjects:
- kind: ServiceAccount
  name: promtail-sa
  namespace: observability
- kind: ServiceAccount
  name: vector-sa
  namespace: observability
- kind: ServiceAccount
  name: otel-collector-sa
  namespace: observability
roleRef:
  kind: ClusterRole
  name: observability-logs-reader
  apiGroup: rbac.authorization.k8s.io

---
# ServiceMonitors for Prometheus to scrape observability stack
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: observability-stack
  namespace: monitoring
  labels:
    app: observability
    component: monitoring
spec:
  namespaceSelector:
    matchNames:
    - observability
  selector:
    matchLabels:
      prometheus.io/scrape: "true"
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  - port: prometheus
    interval: 30s
    path: /metrics

---
# Network Policies for observability
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: observability-network-policy
  namespace: observability
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: securewatch
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: observability
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: observability
  - to:
    - namespaceSelector:
        matchLabels:
          name: securewatch
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443