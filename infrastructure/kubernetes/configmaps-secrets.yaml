# Production ConfigMaps and Secrets for SecureWatch Platform
# Essential configuration for all microservices

apiVersion: v1
kind: ConfigMap
metadata:
  name: securewatch-config
  namespace: securewatch
  labels:
    app: securewatch
    component: config
data:
  # Database Configuration
  db_host: "postgresql-cluster.securewatch.svc.cluster.local"
  db_port: "5432"
  db_name: "securewatch"
  db_ssl: "require"
  
  # Redis Configuration
  redis_host: "redis-cluster.securewatch.svc.cluster.local"
  redis_port: "6379"
  redis_cluster_mode: "true"
  
  # Kafka Configuration
  kafka_brokers: "kafka-0.kafka-headless.securewatch.svc.cluster.local:9092,kafka-1.kafka-headless.securewatch.svc.cluster.local:9092,kafka-2.kafka-headless.securewatch.svc.cluster.local:9092"
  kafka_security_protocol: "SASL_SSL"
  kafka_sasl_mechanism: "SCRAM-SHA-512"
  
  # Elasticsearch Configuration
  elasticsearch_host: "elasticsearch-cluster.securewatch.svc.cluster.local:9200"
  elasticsearch_protocol: "https"
  elasticsearch_index_prefix: "securewatch"
  
  # Application Configuration
  log_level: "info"
  metrics_enabled: "true"
  tracing_enabled: "true"
  
  # Performance Tuning
  worker_threads: "8"
  max_connections: "1000"
  connection_pool_size: "20"
  query_timeout: "30000"
  
  # Security Configuration
  cors_origins: "https://securewatch.example.com,https://admin.securewatch.example.com"
  rate_limit_enabled: "true"
  rate_limit_requests: "1000"
  rate_limit_window: "900"
  
  # Feature Flags
  ml_analytics_enabled: "true"
  real_time_correlation: "true"
  advanced_threat_detection: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: correlation-rules-config
  namespace: securewatch
  labels:
    app: securewatch-correlation-engine
    component: rules
data:
  # Default correlation rules for common attack patterns
  default-rules.yaml: |
    rules:
      - id: "brute_force_detection"
        name: "SSH Brute Force Attack Detection"
        description: "Detects multiple failed SSH login attempts"
        severity: "high"
        conditions:
          - field: "event_type"
            operator: "equals"
            value: "ssh_login_failed"
          - field: "source_ip"
            operator: "count"
            value: 5
            timeframe: "5m"
        actions:
          - type: "alert"
          - type: "block_ip"
            duration: "1h"
      
      - id: "lateral_movement"
        name: "Lateral Movement Detection"
        description: "Detects suspicious lateral movement patterns"
        severity: "critical"
        conditions:
          - field: "logon_type"
            operator: "equals"
            value: "network"
          - field: "user_name"
            operator: "not_in"
            value: ["SYSTEM", "LOCAL SERVICE"]
          - field: "destination_count"
            operator: "greater_than"
            value: 3
            timeframe: "10m"
        actions:
          - type: "alert"
          - type: "incident"
  
  threat-intel-rules.yaml: |
    rules:
      - id: "ioc_domain_match"
        name: "Malicious Domain Communication"
        description: "Detects communication with known malicious domains"
        severity: "high"
        conditions:
          - field: "dns_query"
            operator: "in_threat_feed"
            feed: "malicious_domains"
        actions:
          - type: "alert"
          - type: "enrich_with_threat_intel"

---
# Production Secrets (Base64 encoded placeholders - replace with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: securewatch-secrets
  namespace: securewatch
  labels:
    app: securewatch
    component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  db_password: "c2VjdXJld2F0Y2hfZGJfcGFzc3dvcmQ="  # securewatch_db_password
  db_admin_password: "YWRtaW5fc2VjdXJlX3Bhc3N3b3Jk"  # admin_secure_password
  
  # JWT and API secrets
  jwt_secret: "and0X3N1cGVyX3NlY3VyZV9rZXlfMjAyNQ=="  # jwt_super_secure_key_2025
  api_key: "YXBpX2tleV9zZWN1cmV3YXRjaF8yMDI1"  # api_key_securewatch_2025
  encryption_key: "ZW5jcnlwdGlvbl9rZXlfMzJfYnl0ZXM="  # encryption_key_32_bytes
  
  # External service credentials
  kafka_username: "c2VjdXJld2F0Y2hfa2Fma2E="  # securewatch_kafka
  kafka_password: "a2Fma2Ffc2VjdXJlX3Bhc3N3b3Jk"  # kafka_secure_password
  
  elasticsearch_username: "c2VjdXJld2F0Y2hfZWxhc3RpYw=="  # securewatch_elastic
  elasticsearch_password: "ZWxhc3RpY19zZWN1cmVfcGFzc3dvcmQ="  # elastic_secure_password
  
  redis_password: "cmVkaXNfc2VjdXJlX3Bhc3N3b3Jk"  # redis_secure_password
  
  # OAuth and SAML secrets
  oauth_client_secret: "b2F1dGhfY2xpZW50X3NlY3JldF8yMDI1"  # oauth_client_secret_2025
  saml_private_key: "c2FtbF9wcml2YXRlX2tleV8yMDI1"  # saml_private_key_2025
  
  # Monitoring and observability
  prometheus_password: "cHJvbWV0aGV1c19wYXNzd29yZA=="  # prometheus_password
  grafana_admin_password: "Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA=="  # grafana_admin_password

---
apiVersion: v1
kind: Secret
metadata:
  name: securewatch-tls
  namespace: securewatch
  labels:
    app: securewatch
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificates for HTTPS endpoints (base64 encoded)
  tls.crt: "LS0tLS1CRUdJTi..."  # Replace with actual certificate
  tls.key: "LS0tLS1CRUdJTi..."  # Replace with actual private key

---
apiVersion: v1
kind: Secret
metadata:
  name: hec-tls-certs
  namespace: securewatch
  labels:
    app: securewatch-hec-service
    component: tls
type: kubernetes.io/tls
data:
  # HEC service specific TLS certificates
  tls.crt: "LS0tLS1CRUdJTi..."  # Replace with actual HEC certificate
  tls.key: "LS0tLS1CRUdJTi..."  # Replace with actual HEC private key

---
# Service Account with RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: securewatch-service-account
  namespace: securewatch
  labels:
    app: securewatch
    component: rbac

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: securewatch-role
  namespace: securewatch
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: securewatch-rolebinding
  namespace: securewatch
subjects:
- kind: ServiceAccount
  name: securewatch-service-account
  namespace: securewatch
roleRef:
  kind: Role
  name: securewatch-role
  apiGroup: rbac.authorization.k8s.io

---
# Storage Classes for production workloads
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast-ssd
  labels:
    app: securewatch
    component: storage
provisioner: kubernetes.io/aws-ebs  # Adjust for your cloud provider
parameters:
  type: gp3
  fsType: ext4
  encrypted: "true"
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Retain

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: high-iops-ssd
  labels:
    app: securewatch
    component: storage
provisioner: kubernetes.io/aws-ebs  # Adjust for your cloud provider
parameters:
  type: io2
  iops: "3000"
  fsType: ext4
  encrypted: "true"
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Retain