version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: securewatch_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./create_tables.sql:/docker-entrypoint-initdb.d/01_init_schema.sql
      - ./infrastructure/database/correlation_schema.sql:/docker-entrypoint-initdb.d/02_correlation_schema.sql
    environment:
      POSTGRES_USER: securewatch
      POSTGRES_PASSWORD: securewatch
      POSTGRES_DB: securewatch
      TS_TUNE_MEMORY: "2GB"
      TS_TUNE_NUM_CPUS: "2"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U securewatch -d securewatch"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - securewatch_network

  # Redis Cluster
  redis:
    image: redis:7-alpine
    container_name: securewatch_redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - securewatch_network

  # MCP Marketplace Service
  mcp-marketplace:
    build:
      context: .
      dockerfile: apps/mcp-marketplace/Dockerfile
    container_name: securewatch_mcp_marketplace
    ports:
      - "4006:4006"
    environment:
      - NODE_ENV=development
      - MCP_MARKETPLACE_PORT=4006
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=securewatch
      - DB_USER=securewatch
      - DB_PASSWORD=securewatch
      - REDIS_URL=redis://redis:6379
      - MCP_AGGREGATOR_URL=https://mcpmarket.com/server/rss-buhe
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - securewatch_network

  # Kafka for log ingestion
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: securewatch_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - securewatch_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: securewatch_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - securewatch_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenSearch for log search
  opensearch:
    image: opensearchproject/opensearch:3.0.0
    container_name: securewatch_opensearch
    environment:
      - cluster.name=securewatch-cluster
      - node.name=opensearch-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - plugins.security.disabled=true
      - plugins.security.ssl.http.enabled=false
      - plugins.security.ssl.transport.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - securewatch_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\\|yellow\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # OpenSearch Dashboards for visualization
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:3.0.0
    container_name: securewatch_opensearch_dashboards
    ports:
      - "5601:5601"
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
      - "SERVER_BASEPATH="
      - "SERVER_REWRITEBASEPATH=true"
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - securewatch_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status | grep -q '\"state\":\"green\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Correlation Engine
  correlation-engine:
    build:
      context: ./apps/correlation-engine
      dockerfile: Dockerfile
    container_name: securewatch_correlation_engine
    environment:
      - NODE_ENV=development
      - PORT=4005
      - CORRELATION_ENGINE_PORT=4005
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=securewatch
      - DB_USER=securewatch
      - DB_PASSWORD=securewatch
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKER=kafka:29092
    ports:
      - "4005:4005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - securewatch_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4005/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # KQL Analytics Engine
  analytics-engine:
    build:
      context: ./apps/analytics-engine
      dockerfile: Dockerfile
    container_name: securewatch_analytics_engine
    environment:
      - NODE_ENV=development
      - PORT=4003
      - HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=securewatch
      - DB_USER=securewatch
      - DB_PASSWORD=securewatch
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - MAX_QUERY_TIME=300
      - MAX_MEMORY_MB=2048
      - MAX_RESULT_ROWS=100000
      - MAX_CONCURRENT_QUERIES=10
      - MAX_QUERY_COMPLEXITY=100
      - RATE_LIMIT_MAX=100
      - LOG_LEVEL=info
    ports:
      - "4003:4003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - securewatch_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - /tmp:/tmp # For log files

networks:
  securewatch_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  opensearch_data: