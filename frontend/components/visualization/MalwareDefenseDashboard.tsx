import React, { useEffect, useState } from 'react';

interface DetectionVector {
  platform: string;
  signature: number;
  behavior: number;
  network: number;
}

interface FileIntegrityAlert {
  timestamp: string;
  host: string;
  file: string;
  event: string;
  severity: string;
}

// Updated interface for nested process tree anomalies
interface ProcessAnomalyNode {
  id: string;
  name: string;
  timestamp?: string;
  user?: string;
  host?: string;
  details: string;
  severity: string;
  children: ProcessAnomalyNode[];
}

interface MalwareDefenseData {
  detectionVectorTable: DetectionVector[];
  fileIntegrityMonitoringAlerts: FileIntegrityAlert[];
  processTreeAnomaliesNested: ProcessAnomalyNode[]; // Updated field name and type
}

const MalwareDefenseDashboard: React.FC = () => {
  const [data, setData] = useState<MalwareDefenseData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch('/api/dashboards/malware_defense')
      .then(res => {
        if (!res.ok) {
          throw new Error(`Failed to fetch data: ${res.status} ${res.statusText}`);
        }
        return res.json();
      })
      .then(fetchedData => {
        setData(fetchedData);
      })
      .catch(err => {
        setError(err.message);
        console.error("Failed to fetch malware defense data:", err);
      })
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <div className="text-center p-8 text-gray-100">Loading Malware Defense data...</div>;
  if (error) return <div className="text-center p-8 text-red-500">Error: {error}</div>;
  if (!data) return <div className="text-center p-8 text-gray-100">No data available.</div>;

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 p-4 md:p-6">
      {/* Detection Vector Table */}
      <div className="lg:col-span-2 bg-gray-800 p-4 md:p-6 rounded-lg shadow-xl">
        <h3 className="text-lg font-semibold text-gray-100 mb-4">Detection Vector Table</h3>
        <div className="overflow-x-auto">
          {data.detectionVectorTable && data.detectionVectorTable.length > 0 ? (
            <table className="w-full text-sm text-left text-gray-400">
              <thead className="text-xs text-gray-100 uppercase bg-gray-700">
                <tr>
                  <th scope="col" className="py-3 px-6">Platform</th>
                  <th scope="col" className="py-3 px-6 text-right">Signature</th>
                  <th scope="col" className="py-3 px-6 text-right">Behavior</th>
                  <th scope="col" className="py-3 px-6 text-right">Network</th>
                </tr>
              </thead>
              <tbody>
                {data.detectionVectorTable.map((item) => (
                  <tr key={item.platform} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-600">
                    <td className="py-4 px-6 font-medium text-gray-200 whitespace-nowrap">{item.platform}</td>
                    <td className="py-4 px-6 text-right">{item.signature.toLocaleString()}</td>
                    <td className="py-4 px-6 text-right">{item.behavior.toLocaleString()}</td>
                    <td className="py-4 px-6 text-right">{item.network.toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p className="text-gray-400">No detection vector data available.</p>
          )}
        </div>
      </div>

      {/* File Integrity Monitoring Alerts */}
      <div className="lg:col-span-1 bg-gray-800 p-4 md:p-6 rounded-lg shadow-xl">
        <h3 className="text-lg font-semibold text-gray-100 mb-4">File Integrity Monitoring Alerts</h3>
        <div className="overflow-y-auto max-h-96 space-y-3">
          {data.fileIntegrityMonitoringAlerts && data.fileIntegrityMonitoringAlerts.length > 0 ? (
            data.fileIntegrityMonitoringAlerts.map((alert, index) => (
              <div key={index} className="p-3 bg-gray-700 rounded-md text-sm">
                <p className="font-semibold text-gray-200">Host: {alert.host} - <span className={`font-bold ${alert.severity === 'High' ? 'text-red-400' : 'text-yellow-400'}`}>{alert.severity}</span></p>
                <p className="text-gray-300">File: {alert.file}</p>
                <p className="text-gray-300">Event: {alert.event}</p>
                <p className="text-xs text-gray-500">{new Date(alert.timestamp).toLocaleString()}</p>
              </div>
            ))
          ) : (
            <p className="text-gray-400">No file integrity alerts available.</p>
          )}
        </div>
      </div>

      {/* Enhanced Process Tree Anomalies Display */}
      <div className="lg:col-span-1 bg-gray-800 p-4 md:p-6 rounded-lg shadow-xl">
        <h3 className="text-lg font-semibold text-gray-100 mb-4">Process Tree Anomalies (Nested)</h3>
        <div className="overflow-y-auto max-h-[600px] space-y-2">
          {data.processTreeAnomaliesNested && data.processTreeAnomaliesNested.length > 0 ? (
            data.processTreeAnomaliesNested.map((anomaly) => (
              <ProcessAnomalyItem key={anomaly.id} anomaly={anomaly} level={0} />
            ))
          ) : (
            <p className="text-gray-400">No process tree anomalies available.</p>
          )}
        </div>
      </div>
    </div>
  );
};

// Helper component to render process anomaly items recursively
const ProcessAnomalyItem: React.FC<{ anomaly: ProcessAnomalyNode; level: number }> = ({ anomaly, level }) => {
  const getSeverityClass = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'text-red-500 border-red-500';
      case 'high': return 'text-red-400 border-red-400';
      case 'medium': return 'text-yellow-400 border-yellow-400';
      case 'low': return 'text-blue-400 border-blue-400';
      default: return 'text-gray-300 border-gray-500';
    }
  };

  return (
    <div
      className={`p-2.5 rounded-md bg-gray-700/50 border-l-4 ${getSeverityClass(anomaly.severity)}`}
      style={{ marginLeft: `${level * 15}px` }} // Indentation for nesting
    >
      <div className="flex justify-between items-start">
        <div>
          <p className={`font-semibold text-sm ${getSeverityClass(anomaly.severity).split(' ')[0]}`}>{anomaly.name}</p>
          {anomaly.user && anomaly.host && (
            <p className="text-xs text-gray-400">{anomaly.user} @ {anomaly.host}</p>
          )}
        </div>
        {anomaly.timestamp && (
          <p className="text-xs text-gray-500 whitespace-nowrap pl-2">{new Date(anomaly.timestamp).toLocaleString()}</p>
        )}
      </div>
      <p className="text-xs text-gray-300 mt-1">{anomaly.details}</p>

      {anomaly.children && anomaly.children.length > 0 && (
        <div className="mt-2 space-y-2">
          {anomaly.children.map(child => (
            <ProcessAnomalyItem key={child.id} anomaly={child} level={level + 1} />
          ))}
        </div>
      )}
    </div>
  );
};

export default MalwareDefenseDashboard;
