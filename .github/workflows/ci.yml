name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm typecheck

      - name: Run tests
        run: pnpm test

      - name: Build all packages
        run: pnpm build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    strategy:
      matrix:
        service:
          [
            api-gateway,
            auth-service,
            log-ingestion,
            analytics-engine,
            web-frontend,
          ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/securewatch-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/securewatch-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_STAGING }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          kubectl apply -f infrastructure/kubernetes/
          kubectl set image deployment/api-gateway api-gateway=${{ secrets.DOCKER_USERNAME }}/securewatch-api-gateway:${{ github.sha }} -n securewatch
          kubectl set image deployment/auth-service auth-service=${{ secrets.DOCKER_USERNAME }}/securewatch-auth-service:${{ github.sha }} -n securewatch
          kubectl set image deployment/log-ingestion log-ingestion=${{ secrets.DOCKER_USERNAME }}/securewatch-log-ingestion:${{ github.sha }} -n securewatch
          kubectl set image deployment/analytics-engine analytics-engine=${{ secrets.DOCKER_USERNAME }}/securewatch-analytics-engine:${{ github.sha }} -n securewatch
          kubectl set image deployment/web-frontend web-frontend=${{ secrets.DOCKER_USERNAME }}/securewatch-web-frontend:${{ github.sha }} -n securewatch

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          kubectl apply -f infrastructure/kubernetes/
          kubectl set image deployment/api-gateway api-gateway=${{ secrets.DOCKER_USERNAME }}/securewatch-api-gateway:${{ github.sha }} -n securewatch
          kubectl set image deployment/auth-service auth-service=${{ secrets.DOCKER_USERNAME }}/securewatch-auth-service:${{ github.sha }} -n securewatch
          kubectl set image deployment/log-ingestion log-ingestion=${{ secrets.DOCKER_USERNAME }}/securewatch-log-ingestion:${{ github.sha }} -n securewatch
          kubectl set image deployment/analytics-engine analytics-engine=${{ secrets.DOCKER_USERNAME }}/securewatch-analytics-engine:${{ github.sha }} -n securewatch
          kubectl set image deployment/web-frontend web-frontend=${{ secrets.DOCKER_USERNAME }}/securewatch-web-frontend:${{ github.sha }} -n securewatch
